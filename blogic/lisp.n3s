@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .

# Small demonstrator of a lispy kind of interpreter in blogic
# Here you can write a small program
:Prog1 :value
    (:car
        (:cdr 
            (:cons 
                 (:quote {:a a :b} ) ({ :a a :c })
            )
        )
    ) .

# This is to display the output of your program
(skolem:S skolem:O) log:onQuerySurface {
    skolem:S :result skolem:O .
} .

# Test
( skolem:S) log:onNegativeSurface {
    skolem:S :result { :a a :c } .
    () log:onNegativeSurface {
        :test :is true .
    } .
} .

() log:onQuerySurface {
    :test :is true .
} .

# START BLOGIC Stuff------------------------------------------------------------
# This is still work in progress

# Compile
(skolem:Name skolem:Prog skolem:Answer) log:onNegativeSurface {
    skolem:Name :value skolem:Prog .

    skolem:Prog :eval skolem:Answer .

    () log:onNegativeSurface {
        skolem:Name :result skolem:Answer .
    } .
} .

(skolem:L1 skolem:L2 skolem:H skolem:R) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:L1 :eval skolem:L2>> .

    skolem:L1 log:rawType rdf:List .

    # Calculate the H(ead) and R(est)
    skolem:L1 list:firstRest ( skolem:H skolem:R ) .

    skolem:H log:rawType log:Other .

    # Evaluate first the inner
    skolem:R skolem:H skolem:L2 .
} .

(skolem:L1 skolem:L2 skolem:Type) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:L1 :eval skolem:L2>> .
    skolem:L1 log:rawType skolem:Type .
    skolem:Type log:notEqualTo rdf:List .
    skolem:L1 log:equalTo skolem:L2 .
} .

(skolem:L1 skolem:L2 skolem:H skolem:R skolem:Type) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:L1 :eval skolem:L2>> .

    skolem:L1 log:rawType rdf:List .

    # Calculate the H(ead) and R(est)
    skolem:L1 list:firstRest ( skolem:H skolem:R ).

    skolem:H log:rawType skolem:Type .

    skolem:Type log:notEqualTo log:Other .

    skolem:L1 log:equalTo skolem:L2 .
} .

#############################################################
# "built-ins"                                               #
#############################################################

# :quote
(skolem:L1 skolem:L2) log:onNegativeSurface {
    () log:onNegativeSurface <<(skolem:L1) :quote skolem:L2>> .
    skolem:L1 log:equalTo skolem:L2 .
} .

# :atom
(skolem:L1 skolem:X) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:L1 :atom true>> .
    skolem:L1 :eval skolem:X .
    skolem:X log:rawType log:Formula . 
} .

(skolem:L1 skolem:X skolem:Y) log:onNegativeSurface {
    () log:onNegativeSurface <<(skolem:L1) :atom false>> .
    skolem:L1 :eval skolem:X .
    skolem:X log:rawType skolem:Y . 
    skolem:Y log:notEqualTo log:Formula .
} .

# :eq
(skolem:L1 skolem:L2 skolem:X skolem:Y) log:onNegativeSurface {
    () log:onNegativeSurface <<(skolem:L1 skolem:L2) :eq true>> .
    skolem:L1 :eval skolem:X .
    skolem:L2 :eval skolem:Y .
    skolem:X :atom true .
    skolem:X log:equalTo skolem:Y .
} .

(skolem:L1 skolem:L2 skolem:X skolem:Y) log:onNegativeSurface {
    () log:onNegativeSurface <<(skolem:L1 skolem:L2) :eq false>> .
    skolem:L1 :eval skolem:X .
    skolem:L2 :eval skolem:Y .
    skolem:X :atom false .
} .

(skolem:L1 skolem:L2 skolem:X skolem:Y) log:onNegativeSurface {
    () log:onNegativeSurface <<(skolem:L1 skolem:L2) :eq false>> .
    skolem:L1 :eval skolem:X .
    skolem:L2 :eval skolem:Y .
    skolem:X log:notEqualTo skolem:Y .
} .

# :car
(skolem:L1 skolem:L2 skolem:X) log:onNegativeSurface {
    () log:onNegativeSurface <<(skolem:L1) :car skolem:L2>> .
    skolem:L1 :eval skolem:X .
    skolem:X list:first skolem:L2 .
} .

# :cdr
(skolem:L1 skolem:X skolem:Y skolem:L2) log:onNegativeSurface {
    () log:onNegativeSurface <<(skolem:L1) :cdr skolem:L2>> .
    skolem:L1 :eval skolem:X .

    skolem:X list:firstRest ( skolem:Y skolem:L2 ) .
} .

# :cons
(skolem:L1 skolem:X skolem:Y skolem:L2 skolem:L3) log:onNegativeSurface {
    () log:onNegativeSurface <<(skolem:L1 skolem:L2) :cons skolem:L3>> .
    skolem:L1 :eval skolem:X .
    skolem:L2 :eval skolem:Y .
    ( (skolem:X) skolem:Y ) list:append skolem:L3 .
} .

# END BLOGIC Stuff--------------------------------------------------------------
