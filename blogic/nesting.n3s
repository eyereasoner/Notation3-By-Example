@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

skolem:x a :Person .

# Nesting of postive surfaces adds to the implicit positive default
# surface
() log:onPositiveSurface {
    skolem:x :likes :Music .

    () log:onPositiveSurface {
        skolem:x :plays :Piano .

            () log:onPositiveSurface {
                skolem:x :listensTo :JoeyAlexander .
            } .
    } . 
} .

# Nesting of negative surfaces creates pair of statements on 
# a negative service which serve as antecdents in a logical
# implication and consequents on the positive surface.
# With every even number of nestings something is written on
# the implicit default positive surface (if the antecedent
# is true).
(skolem:x) log:onNegativeSurface {
    # On the negative surface...
    skolem:x a :Person . # The antecedent

    # On the positive surface...the consequent
    () log:onNegativeSurface {
        skolem:x a :PersonPerson . # A new antecedent

        # On the negative surface...a new consequent
        () log:onNegativeSurface {
            skolem:x a :PersonPerson . # A new antecedent

            # On the positiveSurface
            () log:onNegativeSurface {
                skolem:x a :PersonPersonPerson . # The final consequent
            }
        } .
    } .
} .

# Nesting of other surfaces keep the nested structure intact
(skolem:x) log:onNeutralSurface {
    skolem:x :likes :Food .

    (skolem:x) log:onNeutralSurface {
        skolem:x :likes :IndonesianFood .
    } .

    # Negative & Positive surfaces will not be interpreted here
    (skolem:x) log:onNegativeSurface {
        skolem:x a :Person .
        
        () log:onNegativeSurface {
            skolem:x a :Human .
        } .
    } .
} .

# Test
() log:onNegativeSurface {
    skolem:x a :Person , :PersonPerson , :PersonPersonPerson ;
        :likes :Music ;
        :listensTo :JoeyAlexander ;
        :plays :Piano .
    () log:onNegativeSurface {
        :test :is true .
    } .
} .

(skolem:S skolem:P skolem:O) log:onQuerySurface {
    skolem:S skolem:P skolem:O .
    (rdf:type :is :likes :plays :listensTo) list:member skolem:P . 
} .
