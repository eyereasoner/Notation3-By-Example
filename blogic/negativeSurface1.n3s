@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

:Alice :sibling :Bob .
:Bob :sibling :Charly .

:Hans :sibling :Mary .
:Mary :sibling :Agnes .

# (skolem:X skolem:Y) is like For all X and Y) within the surface
# log:onNegativeSurface claims the RDF graph on the surface
# is false.
#
# To have a NOT in a logic is quite powerfull. The implication
# P -> Q is equivalent to ~P OR Q . Keeping this in mind
# we can construct implication from onNegativeSurfaces.
#
# E.g. using De Morgan's laws
#
# ~( P -> Q ) <=> ~(~P OR Q) <=> ~~P AND ~Q  <=> P AND ~Q 
#    
# from which follows:
#
# ( P -> Q ) <=> ~( P AND ~Q ) 
#
# Which means we can nest log:onNegativeSurface to express P -> Q
#   
# What in N3 was:
#    { ?X a ?Y } => { ?Y a :Test } .
# is in blogic
#    (skolem:X skolem:Y) log:onNegativeSurface {
#       skolem:X a skolem:Y .
#       () log:onNegativeSurface  {
#           skolem:Y a :Test .
#       } .
#    } .
(skolem:X skolem:Y skolem:Z) log:onNegativeSurface {
    skolem:X :sibling skolem:Y .
    skolem:Y :sibling skolem:Z .

    () log:onNegativeSurface {
        skolem:X :sibling skolem:Z .
    } .
} .

# Filter out what to see in the output 
# ( skolem:P skolem:O ) is for all P and O in log:onQuerySurface 
# return only the triples matching 
(skolem:S skolem:O) log:onQuerySurface {
    skolem:S :sibling  skolem:O . 
} .

# Test
() log:onNegativeSurface {
    :Alice :sibling :Charly .
    :Hans :sibling :Agnes .
    () log:onNegativeSurface {
        :test :is true .
    } .
} .

() log:onQuerySurface {
    :test :is true .
} .