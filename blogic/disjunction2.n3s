@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

# Testing to make a disjunction based on generated data
# 1 We first infer that Alice and Bob are students
# 2 Then we say that students are from Ghent or Leuven
# 3 Then we say that Ghent and Leuven students are smart

:Alice a :PhdStudent ;
    a :GhentStudent .
:Bob a :MasterStudent ;
    a :LeuvenStudent .

# [1]
(_S) log:onNegativeSurface {
    _S a :MasterStudent .

    () log:onNegativeSurface {
        _S a :Student .
    } .
} .

(_S) log:onNegativeSurface {
    _S a :PhdStudent .

    () log:onNegativeSurface {
        _S a :Student .
    } .
} .

# [2]
(_S) log:onNegativeSurface {
    _S a :Student .

    () log:onNegativeSurface {
        _S a :GhentStudent .
    } .

    () log:onNegativeSurface {
        _S a :LeuvenStudent .
    } .
} .

# [3]
(_S) log:onNegativeSurface {
    _S a :GhentStudent .

    () log:onNegativeSurface {
        _S a :SmartPerson .
    } .
} .

(_S) log:onNegativeSurface {
    _S a :LeuvenStudent .

    () log:onNegativeSurface {
        _S a :SmartPerson .
    } .
} .

(_S _O) log:onQuerySurface {
    _S a _O .
} .

# Test
() log:onNegativeSurface {

    :Alice a :SmartPerson .

    () log:onNegativeSurface {
        :testAlice :is true .
    } .
} .

() log:onNegativeSurface {
    :Bob a :SmartPerson .

    () log:onNegativeSurface {
        :testBob :is true .
    } .
} .

() log:onNegativeSurface {
    :testAlice :is true .
    :testBob :is true .
    () log:onNegativeSurface {
        :test :is true .
    } .
} .

(_S _O) log:onQuerySurface {
    _S :is _O .
} .
