@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

# Example by DÃ¶rthe Arndt
# Elimination of disjunction is a form of a tautology of the form
#
# (P -> Q) . (R -> Q ) . (P v R ) |- Q
#
# Proof:
# 
# |- ~(P . ~Q) . ~(R . ~Q) . ~(~P . ~R) 
# |- ~( ~(~P . ~R) . ~Q ) . ~(~P . ~R)
# |- (P v R)->Q . (P v R)
# Here follows Q
:Beetle a :Car .
() log:onNegativeSurface {
    :Beetle :is :blue . 
} .

(_S) log:onNegativeSurface {
    # P
    _S :is :green.

    () log:onNegativeSurface {
        # -> Q
        _S :is :beautiful .
    } .
} .

(_S) log:onNegativeSurface {
    # R
    _S :is :blue.

    () log:onNegativeSurface {
        # -> Q
        _S :is :beautiful .
    } .
} .

(_S) log:onNegativeSurface {
    # Need to match something in the data to trigger the rules
    _S a :Car.

    # P
    () log:onNegativeSurface {
        _S :is :green . 
    } .

    # OR R
    () log:onNegativeSurface {
        _S :is :blue . 
    } .
} .

# In reasoners that support disjunction via contrapositives
# we can at least check that denying the conclusion (Q) 
# will lead to a inconsistency (the reasoner should burn
# a logical fuse).

# The negation of the conclusion should blow an inference fuse
# ~Q (!?)
#() log:onNegativeSurface {
#    :Beetle :is :beautiful .
#} .

# When a full disjunction elimintation is supported 
# in a reasoner, this also needs to work. 
# 
## Test
() log:onNegativeSurface {
    :Beetle :is :beautiful .
    
    () log:onNegativeSurface {
        :test :is true .
    } .
} .

(_S _O) log:onQuerySurface {
    _S :is _O .
} .
