@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix owl: <http://www.w3.org/2002/07/owl#>.

:HasCardinalityCheck owl:onProperty :name .
:HasCardinalityCheck owl:cardinality 3 .

:P1 :name "Patrick" .
:P1 :name "Christian" .
:P1 :name "Herman" .

:P2 :name "Stefanie" .
:P2 :name "Elizabeth" .

# Check for a cardinality
(skolem:a skolem:b skolem:c skolem:x skolem:y skolem:Counter skolem:o) log:onNegativeSurface {
    skolem:a owl:onProperty skolem:b.
    skolem:a owl:cardinality skolem:c.

    skolem:x skolem:b skolem:y .

    # Search for a cardinality Counter 
    # ...actually this means for any log:GraphCounter you 
    # can find this must be true.
    skolem:Counter a log:GraphCounter .

    { skolem:x skolem:b skolem:o } skolem:Counter skolem:c .
    
    () log:onNegativeSurface {
       skolem:x a skolem:a.
    }.
}.

# This is a local implementation of a log:GraphCounter
:cardinalCount a log:GraphCounter .
(skolem:Graph skolem:Count skolem:List skolem:Scope) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:Graph :cardinalCount skolem:Count>> .
    ( () skolem:Graph skolem:List ) log:collectAllIn skolem:Scope .
    skolem:List list:length skolem:Count .
} .

# Test
() log:onNegativeSurface {
    :P1 a :HasCardinalityCheck .
    () log:onNegativeSurface {
        :test :is true .
    } .
} .

(skolem:S skolem:X) log:onQuerySurface {
    skolem:S a skolem:X .
} .

(skolem:S skolem:X) log:onQuerySurface {
    skolem:S :name skolem:X .
} .

() log:onQuerySurface {
    :test :is true .
} .
