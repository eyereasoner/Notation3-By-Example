@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix owl: <http://www.w3.org/2002/07/owl#>.

:HasCardinalityCheck owl:onProperty :name .
:HasCardinalityCheck owl:cardinality 3 .

:P1 :name "Patrick" .
:P1 :name "Christian" .
:P1 :name "Herman" .

:P2 :name "Stefanie" .
:P2 :name "Elizabeth" .

# Check for a cardinality
(?a ?b ?c ?x ?y ?Counter ?o) log:onNegativeSurface {
    ?a owl:onProperty ?b.
    ?a owl:cardinality ?c.

    ?x ?b ?y .

    # Search for a cardinality Counter 
    # ...actually this means for any log:GraphCounter you 
    # can find this must be true.
    ?Counter a log:GraphCounter .

    { ?x ?b ?o } ?Counter ?c .
    
    () log:onNegativeSurface {
       ?x a ?a.
    }.
}.

# This is a local implementation of a log:GraphCounter
:cardinalCount a log:GraphCounter .
(?Graph ?Count ?List ?Scope) log:onNegativeSurface {
    () log:onNegativeSurface <<?Graph :cardinalCount ?Count>> .
    ( () ?Graph ?List ) log:collectAllIn ?Scope .
    ?List list:length ?Count .
} .

# Test
() log:onNegativeSurface {
    :P1 a :HasCardinalityCheck .
    () log:onNegativeSurface {
        :test :is true .
    } .
} .

(?S ?X) log:onQuerySurface {
    ?S a ?X .
} .

(?S ?X) log:onQuerySurface {
    ?S :name ?X .
} .

() log:onQuerySurface {
    :test :is true .
} .
