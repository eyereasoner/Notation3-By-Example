@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix owl: <http://www.w3.org/2002/07/owl#>.

:HasCardinalityCheck owl:onProperty :name .
:HasCardinalityCheck owl:cardinality 3 .

:P1 :name "Patrick" .
:P1 :name "Christian" .
:P1 :name "Herman" .

:P2 :name "Stefanie" .
:P2 :name "Elizabeth" .

# Check for a cardinality
(_a _b _c _x _y _Counter _o) log:onNegativeSurface {
    _a owl:onProperty _b.
    _a owl:cardinality _c.

    _x _b _y .

    # Search for a cardinality Counter 
    # ...actually this means for any log:GraphCounter you 
    # can find this must be true.
    _Counter a log:GraphCounter .

    { _x _b _o } _Counter _c .
    
    () log:onNegativeSurface {
       _x a _a.
    }.
}.

# This is a local implementation of a log:GraphCounter
:cardinalCount a log:GraphCounter .
(_Graph _Count _List _Scope) log:onNegativeSurface {
    () log:onNegativeSurface <<_Graph :cardinalCount _Count>> .
    ( () _Graph _List ) log:collectAllIn _Scope .
    _List list:length _Count .
} .

# Test
() log:onNegativeSurface {
    :P1 a :HasCardinalityCheck .
    () log:onNegativeSurface {
        :test :is true .
    } .
} .

(_S _X) log:onQuerySurface {
    _S a _X .
} .

(_S _X) log:onQuerySurface {
    _S :name _X .
} .

() log:onQuerySurface {
    :test :is true .
} .
