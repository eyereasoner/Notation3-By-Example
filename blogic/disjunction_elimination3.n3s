@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

# Testing if we don't eliminate too much 
# Skip this when reasoning only allows disjunction via contrapositives

:A a :B .
() log:onNegativeSurface {
    :A a :B2 .
} .

# ∀S : (S a B) -> (S a B1) ∨ (S a B2)
(_S) log:onNegativeSurface {
    _S a :B .

    () log:onPositiveSurface {
        () log:onNegativeSurface {
            _S a :B1 .
        } .

        () log:onNegativeSurface {
            _S a :B2 .
        } .
    } .
} .

# ∀S : (S a B1) -> (S a C) 
(_S) log:onNegativeSurface {
    _S a :B1 .

    () log:onNegativeSurface {
        _S a :C .
    }.
} .

# ∀S : (S a B2) -> (S a C) 
(_S) log:onNegativeSurface {
    _S a :B2 .

    () log:onNegativeSurface {
        _S a :C .
    }.
} .

# Test if we still have a particular (A a B1) ∨ (A a B2)
() log:onNegativeSurface {
    () log:onNegativeSurface {
        () log:onNegativeSurface {
            :A a :B1 .
        } .
        () log:onNegativeSurface {
            :A a :B2 .
        } .
    } .
    () log:onNegativeSurface {
        :A a :D .
    } .
} .

() log:onNegativeSurface {
    # Test if we still get the C
    :A a :C .
    # Test if we still get the disjunction
    :A a :D .

    () log:onNegativeSurface {
        :test :is true .
    } .
} .

(_S _O) log:onQuerySurface {
    _S a _O .
} .

# Test
(_S _O) log:onQuerySurface {
    _S :is _O .
} .
