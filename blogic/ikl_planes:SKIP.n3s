@prefix : <urn:example:> .
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

# TPTP format
#
# fof(p3,axiom,(
#    ? [X,Y,Z] :
#      ( type(X,plane) &
#        type(Y,plane) & 
#        type(Z,plane) & 
#        id(X,1) & id(Y,2) & id(Z,3) &
#        X!=Y & X!=Z & Y!=Z 
#      )
# )).
#
# ## There is no plane with id(1) and id(2) where both are the same
# fof(test,conjecture,(
#    ? [X,Y] : ~( type(X,plane) & type(Y,plane) & id(X,1) & id(Y,2) & X=Y)
# )).
#

skolem:A1 a :Airplane .
skolem:A2 a :Airplane .
skolem:A3 a :Airplane .

skolem:A1 :id 1 .
skolem:A2 :id 2 .
skolem:A3 :id 3 .

skolem:A1 owl:differentFrom skolem:A2 .
skolem:A1 owl:differentFrom skolem:A3 .
skolem:A2 owl:differentFrom skolem:A3 .

# Comment this out..this is should blow a fuse (and it does!)
#() log:onNegativeSurface {
#    (skolem:X skolem:Y) log:onNegativeSurface {
#        skolem:X a :Airplane .
#        skolem:Y a :Airplane .
#        skolem:X :id 1 .
#        skolem:Y :id 2 .
#        skolem:X owl:sameAs skolem:Y .
#    } .
#} .

() log:onNegativeSurface {
    # So this must be true
    (skolem:X skolem:Y) log:onNegativeSurface {
        skolem:X a :Airplane .
        skolem:Y a :Airplane .
        skolem:X :id 1 .
        skolem:Y :id 2 .
        skolem:X owl:sameAs skolem:Y .
    } .
    () log:onNegativeSurface {
        :test :is true .
    }
} .

() log:onQuerySurface {
    :test :is true .
} .

# OWL

(skolem:A skolem:B) log:onNegativeSurface {
    skolem:A owl:differentFrom skolem:B .
    () log:onNegativeSurface {
        skolem:B owl:differentFrom skolem:A .
    } . 
} . 

(skolem:A skolem:B skolem:C) log:onNegativeSurface {
    skolem:A owl:sameAs skolem:B .
    skolem:A owl:differentFrom skolem:B .
} .  

(skolem:A skolem:B skolem:C skolem:D) log:onNegativeSurface {
    skolem:A owl:sameAs skolem:B .
    skolem:A skolem:C skolem:D .
    () log:onNegativeSurface {
        skolem:B skolem:C skolem:D .
    } .
} .
    
(skolem:A skolem:B skolem:C skolem:D) log:onNegativeSurface {
    skolem:A owl:sameAs skolem:B .
    skolem:C skolem:A skolem:D .
    () log:onNegativeSurface {
        skolem:C skolem:B skolem:D .
    } .
} . 

(skolem:A skolem:B skolem:C skolem:D) log:onNegativeSurface {
    skolem:A owl:sameAs skolem:B .
    skolem:D skolem:C skolem:A .
    () log:onNegativeSurface {
        skolem:D skolem:C skolem:B .
    } .
} .

(skolem:A skolem:B) log:onNegativeSurface {
    skolem:A owl:sameAs skolem:B .
    () log:onNegativeSurface {
        skolem:B owl:sameAs skolem:A .
    } .
} .

(skolem:A skolem:B skolem:C) log:onNegativeSurface {
    skolem:A owl:sameAs skolem:B .
    skolem:B owl:sameAs skolem:C .
    () log:onNegativeSurface {
        skolem:A owl:sameAs skolem:C .
    } .
} .
