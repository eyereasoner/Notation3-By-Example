@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

# Erasure test

# A
:A a :A0 .

# A . ~( B . ~A ) = A , whatever B is
# Testing we don't get a fuse
() log:onNegativeSurface {
    # B
    () log:onNegativeSurface true .

    # This we should get as output
    () log:onNegativeSurface {
        :A a :A0 .
    } .
} .

# A . ~(B . ~(C . ~A)) = A . ~B , whatever C is
# 
# Make C something false...
#  `-> we should get a ~B
() log:onNegativeSurface {
    :B a :B1 .

    () log:onNegativeSurface {
        # C
        () log:onNegativeSurface true .

        () log:onNegativeSurface {
            :A a :A0 .
        } .
    } . 
} .

# A . ~(B . ~(C . ~A)) = A . ~B , whatever C is
#
# Make C something true...
#  `-> we should get a ~B
() log:onNegativeSurface {
    :B a :B2 .

    () log:onNegativeSurface {
        # C
        :C a :C2 .

        () log:onNegativeSurface {
            :A a :A0 .
        } .
    } . 
} .

# A . ~(B . ~(C . ~(D . ~A))) = A . (B -> C), whatever D is
#
# Make a B
:B a :B3 .
# Make D something false...
#  `-> we should get a (B -> C)
() log:onNegativeSurface {
    :B a :B3 .

    () log:onNegativeSurface {
        # C
        :C a :C3 .

        () log:onNegativeSurface {
            # D .
            () log:onNegativeSurface true .

            () log:onNegativeSurface {
                :A a :A0 .
            } .
        } .
    } .
} .

# A . ~(B . ~(C . ~(D . ~A))) = A . (B -> C), whatever D is
#
# Make a B
:B a :B4 .
# Make D something true...
#  `-> we should get a (B -> C)
() log:onNegativeSurface {
    :B a :B4 .

    () log:onNegativeSurface {
        # C
        :C a :C4 .

        () log:onNegativeSurface {
            # D .
            :D a :D4 .

            () log:onNegativeSurface {
                :A a :A0 .
            } .
        } .
    } .
} .

# ~(B . ~(C . ~B)) = ~B, whatever C is
# Make C something false
() log:onNegativeSurface {
    :B a :B5 .

    () log:onNegativeSurface {
        # C
        () log:onNegativeSurface true .

        () log:onNegativeSurface {
            :B a :B5 .
        } .
    } .
} .

# ~(B . ~(C . ~B)) = ~B, whatever C is
# Make C something true
() log:onNegativeSurface {
    :B a :B6 .

    () log:onNegativeSurface {
        # C
        :C a :C6 .

        () log:onNegativeSurface {
            :B a :B6 .
        } .
    } .
} .

# ~(B . ~(C . ~(D . ~B))) = (B -> C), whatever D is
#
# Make a B
:B a :B7 .
# Make D something false...
#  `-> we should get (B -> C)
() log:onNegativeSurface {
    :B a :B7 .

    () log:onNegativeSurface {
        # C
        :C a :C7 .

        () log:onNegativeSurface {
            # D .
            () log:onNegativeSurface true .

            () log:onNegativeSurface {
                :B a :B7 .
            } .
        } .
    } .
} .

# ~(B . ~(C . ~(D . ~B))) = (B -> C), whatever D is
#
# Make a B
:B a :B8 .
:D a :D8 .
# Make D something true...
#  `-> we should get (B -> C)
() log:onNegativeSurface {
    :B a :B8 .

    () log:onNegativeSurface {
        # C
        :C a :C8 .

        () log:onNegativeSurface {
            # D .
            :D a :D8 .

            () log:onNegativeSurface {
                :B a :B8 .
            } .
        } .
    } .
} .


(_:S _:O) log:onQuerySurface {
    _:S a  _:O .
} .

(_:S _:O) log:onQuerySurface {
    () log:onNegativeSurface {
        _:S a _:O .
    } .
} .

# Test
() log:onNegativeSurface {
    # The positive surface is added here to optimize the execution speed
    # it doesn't have any other effect
    () log:onPositiveSurface {
        :A a :A0 .

        :C a :C3 .
        :C a :C4 .
        :C a :C7 .
        :C a :C8 .
    } .

    () log:onNegativeSurface {
        :B a :B1.
    } .

    () log:onNegativeSurface {
        :B a :B2 .
    } .

    () log:onNegativeSurface {
        :B a :B5 .
    } .

    () log:onNegativeSurface {
        :B a :B6 .
    } .

    () log:onNegativeSurface {
        :test :is true .
    } .
} .

() log:onQuerySurface {
    :test :is true .
} .
