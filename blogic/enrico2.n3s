@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

:jozef a :father.

:franklin a :father .

#\forall x \exists y1,y2 \forall z : 
#  (x a Father) -> y1 child x & y2 pet y1 & 
#  (z pet y1 & y1 child x -> x likes z) 
(skolem:x) log:onNegativeSurface {
    skolem:x a :father .
    (skolem:y1 skolem:y2) log:onNegativeSurface {
        skolem:y1 :child skolem:x .
        skolem:y2 :pet skolem:y1.

        (skolem:z) log:onNegativeSurface {
            skolem:z :pet skolem:y1 .
            skolem:y1 :child skolem:x .
            () log:onNegativeSurface {
                skolem:x :likes skolem:z .
            } .
        } .
    } .
} .

# Test
(skolem:x skolem:y skolem:a skolem:b) log:onNegativeSurface {
    skolem:x :child :jozef .
    skolem:y :child :franklin .

    skolem:x log:notEqualTo skolem:y .

    :jozef :likes skolem:a .
    :franklin :likes skolem:b .

    skolem:a log:notEqualTo skolem:b .

    () log:onNegativeSurface {
        :test :is true .
    } .
} .

# Todo add test for the pets

# Queries
(skolem:s skolem:o) log:onQuerySurface {
    skolem:s a skolem:o . 
} .

(skolem:s skolem:o skolem:q) log:onQuerySurface {
    skolem:s :pet skolem:o . 
} .

(skolem:s skolem:o skolem:q) log:onQuerySurface {
    skolem:s :child skolem:o . 
} .

(skolem:s skolem:o skolem:q) log:onQuerySurface {
    skolem:s :likes skolem:o . 
} .

() log:onQuerySurface {
    :test :is true .
} .
