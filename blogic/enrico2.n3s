@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

:jozef a :father.

:franklin a :father .

#\forall x \exists y1,y2 \forall z : 
#  (x a Father) -> y1 child x & y2 pet y1 & 
#  (z pet y1 & y1 child x -> x likes z) 
($ _:x $) log:onNegativeSurface {
    _:x a :father .
    ($ _:y1 _:y2 $) log:onNegativeSurface {
        _:y1 :child _:x .
        _:y2 :pet _:y1.

        ($ _:z $) log:onNegativeSurface {
            _:z :pet _:y1 .
            _:y1 :child _:x .
            ($ $) log:onNegativeSurface {
                _:x :likes _:z .
            } .
        } .
    } .
} .

# Test
($ _:x _:y _:a _:b $) log:onNegativeSurface {
    _:x :child :jozef .
    _:y :child :franklin .

    _:x log:notEqualTo _:y .

    :jozef :likes _:a .
    :franklin :likes _:b .

    _:a log:notEqualTo _:b .

    ($ $) log:onNegativeSurface {
        :test :is true .
    } .
} .

# Todo add test for the pets

# Queries
($ _:s _:o $) log:onQuerySurface {
    _:s a _:o . 
} .

($ _:s _:o _:q $) log:onQuerySurface {
    _:s :pet _:o . 
} .

($ _:s _:o _:q $) log:onQuerySurface {
    _:s :child _:o . 
} .

($ _:s _:o _:q $) log:onQuerySurface {
    _:s :likes _:o . 
} .

($ $) log:onQuerySurface {
    :test :is true .
} .
