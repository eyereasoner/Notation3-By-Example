@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

:A a :B .
:C a :B .
:D a :B .
() log:onNegativeSurface {
    :A a :B2 .
} .
() log:onNegativeSurface {
    :A a :B3 .
} .
() log:onNegativeSurface {
    :C a :B1 .
} .
() log:onNegativeSurface {
    :C a :B3 .
} .
() log:onNegativeSurface {
    :D a :B1 .
} .
() log:onNegativeSurface {
    :D a :B2 .
} .


# This is an extension of disjunction_elimination.n3 which should conclude 
# that A ,C ,D are all :C-s.

# ∀S : (S a B) -> (S a B1) ∨ (S a B2) ∨ (S a B3) 
(_S) log:onNegativeSurface {
    _S a :B .

    () log:onNegativeSurface {
        _S a :B1 .
    } .

    () log:onNegativeSurface {
        _S a :B2 .
    } .

    () log:onNegativeSurface {
        _S a :B3 .
    } .
} .

# ∀S : (S a B1) -> (S a C) 
(_S) log:onNegativeSurface {
    _S a :B1 .

    () log:onNegativeSurface {
        _S a :C .
    }.
} .

# ∀S : (S a B2) -> (S a C) 
(_S) log:onNegativeSurface {
    _S a :B2 .

    () log:onNegativeSurface {
        _S a :C .
    }.
} .

# ∀S : (S a B3) -> (S a C) 
(_S) log:onNegativeSurface {
    _S a :B3 .

    () log:onNegativeSurface {
        _S a :C .
    }.
} .

(_S _O) log:onQuerySurface {
    _S a _O .
} .

# Test
() log:onNegativeSurface {
    :A a :C .
    :C a :C .
    :D a :C .
    () log:onNegativeSurface {
        :test :is true .
    } .
} .

() log:onQuerySurface {
    :test :is true .
} .
