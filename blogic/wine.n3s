@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

:ChateauxGreysac a :French , :Wine .
:Badenhorst a :SouthAfrican , :Wine .
:Croissant a :French, :Bread .

# ∀ x : ( x a Wine ) -> ( x contains Alcohol )
(skolem:X) log:onNegativeSurface {
    skolem:X a :Wine .

    () log:onNegativeSurface {
        skolem:X :contains :Alcohol .
    } .
} .

# The rule below is
#  ∀ x : ( 
#         ( ( x a Wine ) -> ( x contains Alcohol ) )  ->
#         ( ( x contains Alcohol & x a French ) -> ( x needs ImportTax ) )
#  ) 
#
# Question: how to write (what we actually need in this test)
#  ∀ x : ( 
#         ( ( x a Wine ) -> ( x contains Alcohol ) )  ->
#         ( ( x a French ) -> ( x needs ImportTax ) )
#  ) 
(skolem:X) log:onNegativeSurface {
    () log:onNegativeSurface {
        skolem:X a :Wine .

        () log:onNegativeSurface {
            skolem:X :contains :Alcohol .
        } .
    } . 
    () log:onNegativeSurface {
        () log:onNegativeSurface {
            skolem:X :contains :Alcohol . # This is the extra rule that makes the Question work (josd)
            skolem:X a :French .

            () log:onNegativeSurface {
                skolem:X :needs :ImportTax .
            } .
        } . 
    } .
} .

# Output
(skolem:S skolem:P) log:onQuerySurface {
    skolem:S a skolem:P .
} .

(skolem:S skolem:P) log:onQuerySurface {
    skolem:S :contains skolem:P .
} .

(skolem:S skolem:P) log:onQuerySurface {
    skolem:S :needs skolem:P .
} .

# Test

() log:onNegativeSurface {
    :Croissant :needs :ImportTax .
} .

() log:onNegativeSurface {
    :Badenhorst :needs :ImportTax .
} .

() log:onNegativeSurface {
    :ChateauxGreysac :needs :ImportTax .

    () log:onNegativeSurface {
        :test :is true .
    } .
} .  

() log:onQuerySurface {
    :test :is true .
} .
