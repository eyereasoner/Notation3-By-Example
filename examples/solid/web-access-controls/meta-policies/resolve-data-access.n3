@prefix : <https://example.org/ns/>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix acl: <http://www.w3.org/ns/auth/acl#>.
@prefix string: <http://www.w3.org/2000/10/swap/string#>.
@prefix dc: <http://purl.org/dc/terms/>.
@prefix ldp: <http://www.w3.org/ns/ldp#>.
@prefix posix: <http://www.w3.org/ns/posix/stat#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix solid: <http://www.w3.org/ns/solid/terms#>.
@prefix space: <http://www.w3.org/ns/pim/space#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix vcard: <http://www.w3.org/2006/vcard/ns#>.
@prefix pim: <http://www.w3.org/ns/pim/space#>.

@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .

@prefix pol:  <https://www.example.org/ns/policy#> .


# 1. if agent has access but denial is given for that agent -> do not output triple (rule 1 then)
# 2. if agent has access and no denials are given for that agent -> output triple (rule 1 else)
# 3. if agentClass foaf:Agent has access but denial is given for that class -> do not output triple (rule 2 then)
# 4. if agentClass foaf:Agent has access but no denials are given for that class -> output triple (rule 2 else)




# Output all triples if the user itself
(
    _:Resource _:ResourceACL
    _:ResourceACLGraph
    _:Authorization
    _:G
    _:S _:P _:O

    _:AccessGrant _:AccessDenial
    _:AccessDenialComment
    _:AD_S _:AD_P _:AD_O
    _:Scope
    _:AssertSurface

    _:RequestContextWebID

) log:onNegativeSurface {

    # Extract the requested Resource
    :RequestContext acl:resource _:Resource.
    # ...and the requested access mode
    :RequestContext acl:mode acl:Read.
    # ...and the requested access mode
    :RequestContext acl:agent _:RequestContextWebID.

    # If the resource contains a phone number triple:
    <<() log:onNeutralSurface _:G>> :partOf _:Resource.
    _:G log:includes { _:S _:P _:O }.

    # Our agent has a read access grant for the resource
    _:AccessGrant a :AccessGrant;
        acl:accessTo _:Resource;
        acl:agent _:RequestContextWebID;
        acl:mode acl:Read.

    # We put all triples of the resource on the data surface that are not explicitly denied by an access denial

    (
        # if
        { 
            _:AccessDenial a :AccessDenial;
                acl:accessTo _:Resource;
                acl:mode acl:Read;
                acl:agent _:RequestContextWebID;
                # Check if the triple matches
                acl:conflict << _:S _:P _:O >>;
                acl:comment _:AccessDenialComment.
        }
        # then - on a matching triple, we want to NOT write the triple!
        { 
            _:AssertSurface log:equalTo {
                () log:onMetadataSurface {
                    << _:S _:P _:O >> 
                        :status :Denied;
                        :cause  _:AccessDenialComment;
                        :fromResource _:Resource;
                        :requestedBy _:RequestContextWebID;
                }.
            }.
        }
        # else
        { 
            _:AssertSurface log:equalTo {
                () log:onDataSurface {
                    _:S _:P _:O .
                }.
                () log:onMetadataSurface {
                    << _:S _:P _:O >> 
                        :status :Returned;
                        :fromResource _:Resource;
                        :requestedBy _:RequestContextWebID;
                }.
            }.
        }
    ) log:ifThenElseIn _:Scope.

    # Run output
    () log:onNegativeSurface _:AssertSurface.

}.





# Output all triples if the user itself
(
    _:Resource _:ResourceACL
    _:ResourceACLGraph
    _:Authorization
    _:G
    _:S _:P _:O

    _:AccessGrant _:AccessDenial
    _:AccessDenialComment
    _:AD_S _:AD_P _:AD_O
    _:Scope
    _:AssertSurface

    _:RequestContextWebID

) log:onNegativeSurface {

    # Extract the requested Resource
    :RequestContext acl:resource _:Resource.
    # ...and the requested access mode
    :RequestContext acl:mode acl:Read.
    # ...and the requested access mode
    :RequestContext acl:agent _:RequestContextWebID.

    # If the resource contains a phone number triple:
    <<() log:onNeutralSurface _:G>> :partOf _:Resource.
    _:G log:includes { _:S _:P _:O }.

    # Our agent has a read access grant for the resource
    _:AccessGrant a :AccessGrant;
        acl:accessTo _:Resource;
        acl:agentClass foaf:Agent;
        acl:mode acl:Read.

    # We put all triples of the resource on the data surface that are not explicitly denied by an access denial

    (
        # if
        { 
            _:AccessDenial a :AccessDenial;
                acl:accessTo _:Resource;
                acl:mode acl:Read;
                acl:agentClass foaf:Agent;
                # Check if the triple matches
                acl:conflict << _:S _:P _:O >>;
                acl:comment _:AccessDenialComment.
        }
        # then - on a matching triple, we want to NOT write the triple!
        { 
            _:AssertSurface log:equalTo {
                () log:onMetadataSurface {
                    << _:S _:P _:O >> 
                        :status :Denied;
                        :cause  _:AccessDenialComment;
                        :fromResource _:Resource;
                        :requestedBy _:RequestContextWebID;
                }.
            }.
        }
        # else
        { 
            _:AssertSurface log:equalTo {
                () log:onDataSurface {
                    _:S _:P _:O .
                }.
                () log:onMetadataSurface {
                    << _:S _:P _:O >> 
                        :status :Returned;
                        :fromResource _:Resource;
                        :requestedBy _:RequestContextWebID;
                }.
            }.
        }
    ) log:ifThenElseIn _:Scope.

    # Run output
    () log:onNegativeSurface _:AssertSurface.

}.
