@prefix : <https://example.org/ns/>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>. 
@prefix acl: <http://www.w3.org/ns/auth/acl#>.
@prefix string: <http://www.w3.org/2000/10/swap/string#> .

# We want to give access
# to all triples
# that are part of a resource X 
# where X has acl:allow set for the WebID in our context

(
_:Resource 
_:MetaResource 
_:ACLResource
_:ACLEntry
_:S_R _:P_R _:O_R
_:S_M _:P_M _:O_M
_:AgentWebID _:RequestWebID
_:Scope
_:Access
_:ResourceAccess _:MetaResourceAccess
_:ACLResourceSurface
_:FormattedErrorString
) log:onNegativeSurface {

    # Bind the requested resource URI in the context
    :RequestContext acl:resource _:Resource .

    _:Resource a :Resource.
    _:Resource :describedby _:MetaResource.
    _:Resource :acl _:ACLResource.

    # If we are allowed by the ACL Entry
    _:ACLEntry a acl:Authorization.
    
    # That is contained by the ACL Resource linked by our Resource
    # This is the line that requires adaptation depending on how we handle the resource conversions
    
    #_:ACLResourceSurface :partOf _:ACLResource.
    <<() log:onPositiveSurface _:ACLResourceSurface>> :partOf _:ACLResource. 
    _:ACLResourceSurface log:includes { _:ACLEntry a acl:Authorization }.

    # We take the agent WebID from the request context 
    :RequestContext acl:agent _:RequestWebID.
  (
        # if
        {
            # And that contains the necessary Read privileges.
            _:ACLEntry acl:accessTo _:Resource.
            _:ACLEntry acl:mode acl:Read.
            _:ACLEntry acl:agent _:AgentWebID.    

            # Check Equality
            _:RequestWebID log:equalTo _:AgentWebID.
        }
        # then
        {  
            _:Access log:equalTo {
                ()log:onResultSurface {
                    _:ResourceAccess a :AccessGrant; 
                        :forResource _:Resource;
                        :forAgent _:RequestWebID;
                        :mode acl:read.

                    _:MetaResourceAccess a :AccessGrant;
                        :forResource _:MetaResource;
                        :forAgent _:RequestWebID;
                        :mode acl:read.
                }
            }
        } 
        # else
        {  
            # Bind the Error Messages
            ("No access granted to %s because of the access controls specified in %s." _:Resource _:ACLResource ) string:format  _:FormattedErrorString .

            _:Access log:equalTo {
                ()log:onWarningSurface {
                    _:ResourceAccess a :AccessDenial;
                        :forResource _:Resource;
                        :forAgent _:RequestWebID;
                        :mode acl:read;
                        :reason _:FormattedErrorString.
                } .
                ()log:onWarningSurface {
                    _:MetaResourceAccess a :AccessDenial;
                        :forResource _:MetaResource;
                        :forAgent _:RequestWebID;
                        :mode acl:read;
                        :reason _:FormattedErrorString.
                } .
            }
        }
    ) log:ifThenElseIn _:Scope .

    # Write out the result
    () log:onNegativeSurface _:Access .
} .

