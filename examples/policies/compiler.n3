@prefix : <http://example.org/ns#> .
@prefix pol:  <https://www.example.org/ns/policy#> .
@prefix util: <https://github.com/phochste/util#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .

# Search for a pol:Rule 
#  pol:body holds the logic of the rule
#  ... pol:when select on what conditions the rule should be executed
#  ... pol:then* describes what should happen when the condition holds
(  _Rule _Body 
   _Param _WhenBody _ThenBody
   _WhenBodyPrime  _ThenBodyPrime
) log:onNegativeSurface {
    # Select all rules with a body
    _Rule a pol:Rule , pol:ValidRule ;
        pol:body _Body .

    # The body should contain a `when` and possible multiple `then`-s.
    _Body log:includes {
        _Param pol:when _WhenBody ;
                pol:then _ThenBody .
    } .

    _ThenBody util:policyParam _ThenBodyPrime .

    # Create the body of a new negative surface implication. The
    # `when` triples will be the head and the `then` triples the body
    # of the implication: HEAD -> BODY
    ( _WhenBody {
        () log:onNegativeSurface {
            # Write the results on an answer surface
            () pol:onAnswerSurface _ThenBodyPrime .
        } 
    }) log:conjunction _WhenBodyPrime .

    # Execute the new negative surface implication rules
    () log:onNegativeSurface {
        _Param log:onNegativeSurface _WhenBodyPrime .
    } .
} .

# Search for a pol:Rule 
#  pol:body holds the logic of the rule
#  ... pol:when select on what conditions the rule should be executed
#  ... pol:thenNot* describes what should not happen when the condition holds
(  _Rule _Body 
   _Param _WhenBody _ThenNotBody
   _WhenBodyPrime
) log:onNegativeSurface {
    # Select all rules with a body
    _Rule a pol:Rule , pol:ValidRule ;
        pol:body _Body .

    # The body should contain a `when` and possible multiple `thenNot`-s.
    _Body log:includes {
        _Param pol:when _WhenBody ;
                pol:thenNot _ThenNotBody .
    } .

    # Create the body of a new negative surface implication. The
    # `when` triples will be the head and the `then` triples the body
    # of the implication: HEAD -> BODY
    ( _WhenBody {
        () log:onPositiveSurface {
            # Write the results on an answer surface
            () pol:onAnswerSurface _ThenNotBody .
        } 
    }) log:conjunction _WhenBodyPrime .

    # Execute the new negative surface implication rules
    () log:onNegativeSurface {
        _Param log:onNegativeSurface _WhenBodyPrime .
    } .
} .

# Extract the answer surfaces 
(_X _Answer _S _P _O) log:onQuestionSurface {
    _X pol:onAnswerSurface _Answer .
    () log:onAnswerSurface _Answer .
} .

# Extract the original data without the rules
(_e _id _S _P _O) log:onQuestionSurface {
    _e pol:mainSubject _id .
    _id util:walkGraph << _S _P _O >> .

    () log:onAnswerSurface {
        _S _P _O
    } .
} .

# Extract the policy metadata
(_S _P _O) log:onQuestionSurface {
    _S _P _O .

    _P list:in ( 
        <https://www.example.org/ns/policy#mainSubject>
        <https://www.example.org/ns/policy#origin>
    ) .

    () log:onAnswerSurface {
        _S _P _O .
    } .
} .
