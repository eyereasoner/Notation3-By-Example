@prefix : <http://example.org/ns#> .
@prefix pol:  <https://www.example.org/ns/policy#> .
@prefix util: <https://github.com/phochste/util#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .

# Search for a pol:Rule 
#  pol:body holds the logic of the rule
#  ... pol:when select on what conditions the rule should be executed
#  ... pol:then* describes what should happen when the condition holds
(  skolem:Rule skolem:Body 
   skolem:Param skolem:WhenBody skolem:ThenBody
   skolem:WhenBodyPrime  skolem:ThenBodyPrime
) log:onNegativeSurface {
    # Select all rules with a body
    skolem:Rule a pol:Rule , pol:ValidRule ;
        pol:body skolem:Body .

    # The body should contain a `when` and possible multiple `then`-s.
    skolem:Body log:includes {
        skolem:Param pol:when skolem:WhenBody ;
                pol:then skolem:ThenBody .
    } .

    skolem:ThenBody util:policyParam skolem:ThenBodyPrime .

    # Create the body of a new negative surface implication. The
    # `when` triples will be the head and the `then` triples the body
    # of the implication: HEAD -> BODY
    ( skolem:WhenBody {
        () log:onNegativeSurface {
            # Write the results on an answer surface
            () pol:onAnswerSurface skolem:ThenBodyPrime .
        } 
    }) log:conjunction skolem:WhenBodyPrime .

    # Execute the new negative surface implication rules
    () log:onNegativeSurface {
        skolem:Param log:onNegativeSurface skolem:WhenBodyPrime .
    } .
} .

# Search for a pol:Rule 
#  pol:body holds the logic of the rule
#  ... pol:when select on what conditions the rule should be executed
#  ... pol:thenNot* describes what should not happen when the condition holds
(  skolem:Rule skolem:Body 
   skolem:Param skolem:WhenBody skolem:ThenNotBody
   skolem:WhenBodyPrime
) log:onNegativeSurface {
    # Select all rules with a body
    skolem:Rule a pol:Rule , pol:ValidRule ;
        pol:body skolem:Body .

    # The body should contain a `when` and possible multiple `thenNot`-s.
    skolem:Body log:includes {
        skolem:Param pol:when skolem:WhenBody ;
                pol:thenNot skolem:ThenNotBody .
    } .

    # Create the body of a new negative surface implication. The
    # `when` triples will be the head and the `then` triples the body
    # of the implication: HEAD -> BODY
    ( skolem:WhenBody {
        () log:onPositiveSurface {
            # Write the results on an answer surface
            () pol:onAnswerSurface skolem:ThenNotBody .
        } 
    }) log:conjunction skolem:WhenBodyPrime .

    # Execute the new negative surface implication rules
    () log:onNegativeSurface {
        skolem:Param log:onNegativeSurface skolem:WhenBodyPrime .
    } .
} .

# Extract the answer surfaces 
(skolem:X skolem:Answer skolem:S skolem:P skolem:O) log:onQuestionSurface {
    skolem:X pol:onAnswerSurface skolem:Answer .
    () log:onAnswerSurface skolem:Answer .
} .

# Extract the original data without the rules
(skolem:e skolem:id skolem:S skolem:P skolem:O) log:onQuestionSurface {
    skolem:e pol:mainSubject skolem:id .
    skolem:id util:walkGraph << skolem:S skolem:P skolem:O >> .

    () log:onAnswerSurface {
        skolem:S skolem:P skolem:O
    } .
} .

# Extract the policy metadata
(skolem:S skolem:P skolem:O) log:onQuestionSurface {
    skolem:S skolem:P skolem:O .

    skolem:P list:in ( 
        <https://www.example.org/ns/policy#mainSubject>
        <https://www.example.org/ns/policy#origin>
    ) .

    () log:onAnswerSurface {
        skolem:S skolem:P skolem:O .
    } .
} .
