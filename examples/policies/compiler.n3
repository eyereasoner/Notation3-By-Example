@prefix : <http://example.org/ns#> .
@prefix pol:  <https://www.example.org/ns/policy#> .
@prefix util: <https://github.com/phochste/util#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .

# Search for a pol:Rule 
#  pol:body holds the logic of the rule
#  ... pol:when select on what conditions the rule should be executed
#  ... pol:then* describes what should happen when the condition holds
(  ?Rule ?Body 
   ?Param ?WhenBody ?ThenBody
   ?WhenBodyPrime  ?ThenBodyPrime
) log:onNegativeSurface {
    # Select all rules with a body
    ?Rule a pol:Rule , pol:ValidRule ;
        pol:body ?Body .

    # The body should contain a `when` and possible multiple `then`-s.
    ?Body log:includes {
        ?Param pol:when ?WhenBody ;
                pol:then ?ThenBody .
    } .

    ?ThenBody util:policyParam ?ThenBodyPrime .

    # Create the body of a new negative surface implication. The
    # `when` triples will be the head and the `then` triples the body
    # of the implication: HEAD -> BODY
    ( ?WhenBody {
        () log:onNegativeSurface {
            # Write the results on an answer surface
            () pol:onAnswerSurface ?ThenBodyPrime .
        } 
    }) log:conjunction ?WhenBodyPrime .

    # Execute the new negative surface implication rules
    () log:onNegativeSurface {
        ?Param log:onNegativeSurface ?WhenBodyPrime .
    } .
} .

# Search for a pol:Rule 
#  pol:body holds the logic of the rule
#  ... pol:when select on what conditions the rule should be executed
#  ... pol:thenNot* describes what should not happen when the condition holds
(  ?Rule ?Body 
   ?Param ?WhenBody ?ThenNotBody
   ?WhenBodyPrime
) log:onNegativeSurface {
    # Select all rules with a body
    ?Rule a pol:Rule , pol:ValidRule ;
        pol:body ?Body .

    # The body should contain a `when` and possible multiple `thenNot`-s.
    ?Body log:includes {
        ?Param pol:when ?WhenBody ;
                pol:thenNot ?ThenNotBody .
    } .

    # Create the body of a new negative surface implication. The
    # `when` triples will be the head and the `then` triples the body
    # of the implication: HEAD -> BODY
    ( ?WhenBody {
        () log:onPositiveSurface {
            # Write the results on an answer surface
            () pol:onAnswerSurface ?ThenNotBody .
        } 
    }) log:conjunction ?WhenBodyPrime .

    # Execute the new negative surface implication rules
    () log:onNegativeSurface {
        ?Param log:onNegativeSurface ?WhenBodyPrime .
    } .
} .

# Extract the answer surfaces 
(?X ?Answer ?S ?P ?O) log:onQuestionSurface {
    ?X pol:onAnswerSurface ?Answer .
    () log:onAnswerSurface ?Answer .
} .

# Extract the original data without the rules
(?e ?id ?S ?P ?O) log:onQuestionSurface {
    ?e pol:mainSubject ?id .
    ?id util:walkGraph << ?S ?P ?O >> .

    () log:onAnswerSurface {
        ?S ?P ?O
    } .
} .

# Extract the policy metadata
(?S ?P ?O) log:onQuestionSurface {
    ?S ?P ?O .

    ?P list:in ( 
        <https://www.example.org/ns/policy#mainSubject>
        <https://www.example.org/ns/policy#origin>
    ) .

    () log:onAnswerSurface {
        ?S ?P ?O .
    } .
} .
