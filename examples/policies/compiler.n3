@prefix : <http://example.org/ns#> .
@prefix pol:  <https://www.example.org/ns/policy#> .
@prefix util: <https://github.com/phochste/util#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .

# Search for a pol:Rule 
#  pol:body holds the logic of the rule
#  ... pol:when select on what conditions the rule should be executed
#  ... pol:then* describes what should happen when the condition holds
(  _:Rule _:Body 
   _:Param _:WhenBody _:ThenBody
   _:WhenBodyPrime  _:ThenBodyPrime
| log:onNegativeSurface {
    # Select all rules with a body
    _:Rule a pol:Rule , pol:ValidRule ;
        pol:body _:Body .

    # The body should contain a `when` and possible multiple `then`-s.
    _:Body log:includes {
        _:Param pol:when _:WhenBody ;
                pol:then _:ThenBody .
    } .

    _:ThenBody util:policyParam _:ThenBodyPrime .

    # Create the body of a new negative surface implication. The
    # `when` triples will be the head and the `then` triples the body
    # of the implication: HEAD -> BODY
    ( _:WhenBody {
        (| log:onNegativeSurface {
            # Write the results on an answer surface
            () pol:onAnswerSurface _:ThenBodyPrime .
        } 
    }) log:conjunction _:WhenBodyPrime .

    # Execute the new negative surface implication rules
    (| log:onNegativeSurface {
        _:Param log:onNegativeSurface _:WhenBodyPrime .
    } .
} .

# Search for a pol:Rule 
#  pol:body holds the logic of the rule
#  ... pol:when select on what conditions the rule should be executed
#  ... pol:thenNot* describes what should not happen when the condition holds
(  _:Rule _:Body 
   _:Param _:WhenBody _:ThenNotBody
   _:WhenBodyPrime
| log:onNegativeSurface {
    # Select all rules with a body
    _:Rule a pol:Rule , pol:ValidRule ;
        pol:body _:Body .

    # The body should contain a `when` and possible multiple `thenNot`-s.
    _:Body log:includes {
        _:Param pol:when _:WhenBody ;
                pol:thenNot _:ThenNotBody .
    } .

    # Create the body of a new negative surface implication. The
    # `when` triples will be the head and the `then` triples the body
    # of the implication: HEAD -> BODY
    ( _:WhenBody {
        (| log:onPositiveSurface {
            # Write the results on an answer surface
            () pol:onAnswerSurface _:ThenNotBody .
        } 
    }) log:conjunction _:WhenBodyPrime .

    # Execute the new negative surface implication rules
    (| log:onNegativeSurface {
        _:Param log:onNegativeSurface _:WhenBodyPrime .
    } .
} .

# Extract the answer surfaces 
(_:X _:Answer _:S _:P _:O| log:onQuerySurface {
    _:X pol:onAnswerSurface _:Answer .
    () log:negativeTriple _:Answer .
} .

# Extract the original data without the rules
(_:e _:id _:S _:P _:O| log:onQuerySurface {
    _:e pol:mainSubject _:id .
    _:id util:walkGraph << _:S _:P _:O >> .

    () log:negativeTriple {
        _:S _:P _:O .
    } .
} .

# Extract the policy metadata
(_:S _:P _:O| log:onQuerySurface {
    _:S _:P _:O .

    _:P list:in ( 
        <https://www.example.org/ns/policy#mainSubject>
        <https://www.example.org/ns/policy#origin>
    ) .

    () log:negativeTriple {
        _:S _:P _:O .
    } .
} .