@prefix : <https://github.com/eyereasoner/Notation3-By-Example/example/n3l#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .

# Find all log:RDFSurface and compile them into blogic
(_:N _:F _:X) log:onNegativeSurface {
    _:N a log:RDFSurface ;
        rdf:value _:F .
    _:F :asSurface _:X .
    () log:onNegativeSurface _:X . 
} .

# List :asSurface Blogic
#  returns the List as Blogic graph
(_:F _:G) log:onNegativeSurface {
    () log:onQuerySurface {
        _:F :asSurface _:G .
    } .
    # We use an accumulator to construct the graph
    (_:F ()) :_asSurface _:G . 
} .

# When the list is empty we are done with accumulating and return the result
(_:Acc) log:onNegativeSurface {
    () log:onQuerySurface {
        (() _:Acc) :_asSurface _:Acc .
    } .
} .

# Peak into the list if we see a blogic type list, that gathering the subgraph defined in it
(_:F _:Acc _:N _:G _:A _:B _:Type _:Rest _:Graph) log:onNegativeSurface {
    () log:onQuerySurface {
        (_:F _:Acc) :_asSurface _:G .
    } .
    
    _:F list:length _:N .
    _:N math:greaterThan 0 .

    # Peek what we have in the list
    ( (_:A _:B) _:Rest ) list:append _:F .    

    # Test if it is blogic like...
    _:A list:in ( log:neg log:pos log:query log:construct ) .

    # Find the subgraph of the rest
    _:Rest :asGraph _:Graph .

    # Construct the surface...
    (_:A _:B _:Graph) :makeSurface _:G .
} .

# Construct the graphs we need..
(_:Param _:Graph _:Blogic) log:onNegativeSurface {
    () log:onQuerySurface {
        (log:neg _:Param _:Graph) :makeSurface _:Blogic .
    } .
    ( () { _:Param log:onNegativeSurface _:Graph }) :_asSurface _:Blogic .
} .

(_:Param _:Graph _:Blogic) log:onNegativeSurface {
    () log:onQuerySurface {
        (log:pos _:Param _:Graph) :makeSurface _:Blogic .
    } .
    ( () { _:Param log:onPositiveSurface _:Graph }) :_asSurface _:Blogic .
} .

(_:Param _:Graph _:Blogic) log:onNegativeSurface {
    () log:onQuerySurface {
        (log:query _:Param _:Graph) :makeSurface _:Blogic .
    } .
    ( () { _:Param log:onQuerySurface _:Graph }) :_asSurface _:Blogic .
} .

(_:Param _:Graph _:Blogic) log:onNegativeSurface {
    () log:onQuerySurface {
        (log:construct _:Param _:Graph) :makeSurface _:Blogic .
    } .
    ( () { _:Param log:onQuerySurface _:Graph }) :_asSurface _:Blogic .
} .

# List :asGraph Formula
#  given a list of 3 return a graph
(_:L _:Graph _:Temp) log:onNegativeSurface {
    () log:onQuerySurface {
        _:L :asGraph _:Graph .
    } .
    (_:L ()) :_asGraph _:Temp .
    _:Graph graph:list _:Temp .
} .

(_:Acc) log:onNegativeSurface {
    () log:onQuerySurface {
        ( () _:Acc) :_asGraph _:Acc .
    } .
} .

(
   _:L _:Acc _:Graph 
   _:Head _:Tail _:Peek
   _:N _:S _:P _:O _:Rest _:AccNew _:Surface
   _:Scope
) log:onNegativeSurface {
    () log:onQuerySurface {
        (_:L _:Acc) :_asGraph _:Graph .
    } .

    _:L list:length _:N .
    _:N math:greaterThan 0 .

    _:L list:firstRest (_:Head _:Tail) . 

    # If we have a log:neg, then create a nested log:neg otherwise
    # continue building the graph
    (
       # if
       {
         # Check if the head is a list with a log:neg

         _:Head log:rawType rdf:List .
         _:Head list:first _:Peek .
         _:Peek list:in (log:neg log:pos log:query log:construct) .
       }
       # then
       {
            _:Head :asSurface _:Surface .            
            ( _:Acc ( _:Surface ) ) list:append _:AccNew .
            ( _:Tail _:AccNew ) :_asGraph _:Graph .
       }  
       # else 
       {
            ( (_:S _:P _:O) _:Rest ) list:append _:L . 

            # Append this as new triple graph to the accumulator
            ( _:Acc ( { _:S _:P _:O } ) ) list:append _:AccNew .
            ( _:Rest _:AccNew ) :_asGraph _:Graph .
       }
    ) log:ifThenElseIn _:Scope .
} .
