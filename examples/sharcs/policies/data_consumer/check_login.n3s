@prefix : <http://www.example.org/rdf#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

# ForAll Login,User,Session :
# (<Login> a Login) &
# (<Login> as <User>) &
# (<Session> a LoginSession) &
# (<Session> user <User>) &
# (<Session> status LoggedIn) &
# (<Session> client <Client>) &
# (<Client> a DataConsumer) &
# (<Client> isActive true)
# IMPLIES
#   (<Login> user <User>) &
#   (<Login> a ValidLogin)        
(_Login _Client _Session _User) log:onNegativeSurface {
    
    _Login 
        a :Login ;
        :as _User .

    _Session a :LoginSession ;
        :user _User ;
        :client _Client ;
        :status :LoggedIn .

    _Client 
        a :DataConsumer ;
        :isActive true .

    () log:onNegativeSurface {
        _Login :user _User .
        _Login a :ValidLogin .
    } .
} .

# ForAll Login, Membership, Organization, User:
# (<Login> a Login) &
# (<Login> user <User>) &
# (<Membership> a PMPMembership) &
# (<Membership> isActive true) &
# (<Membership> hasOrganization <Organization>) &
# (<Membership> hasMember <User>) &
# (<Organization> a Organization) &
# (<Organization> isActive true) &
# (<Organization> hasMember <User>)
# IMPLIES
#   (<Login> organization <Organization>) &
#   (<Login> a ValidMembership)
(_Login _Membership _Organization _User) log:onNegativeSurface {
    _Login 
        a :Login ;
        :user _User .

    _Membership 
        a :PMPMembership ;
        :isActive true ;
        :hasOrganization _Organization ;
        :hasMember _User .

    () log:onNegativeSurface {
        _Login :membership _Membership .
        _Login :organization _Organization .
        _Login a :ValidMembership .
    } .
} .

# ForAll Login, Organization, User:
# (<Login> a Login) &
# (<Login> user <User>) & 
# (<Organization> a Organization) &
# (<Organization> isActive true) &
# (<Organization> hasMember <User>)
# IMPLIES:
#   (<Login> a ValidOrganization)
(_Login _Organization _User) log:onNegativeSurface {
    _Login 
        a :Login ;
        :user _User .

    _Organization 
        a :Organization ;
        :isActive true ;
        :hasMember _User .

    () log:onNegativeSurface {
        _Login a :ValidOrganization .
    }
} .

# ForAll Login, Membership, Client, Subscription:
# (<Login> a Login) &
# (<Login> membership <Membership>) &
# (<Subscription> a Subscription) &
# (<Subscription> isActive true) &
# (<Subscription> hasMembership <Membership>) &
# (<Subscription> hasClient <Client>)
# IMPLIES:
#   (<Login> clientSubscription <Client>) &&
#   (<Login> a ValidSubscription)
(_Login _Membership _Client _Subscription) log:onNegativeSurface {
    _Login 
        a :Login ;
        :membership _Membership .

    _Subscription 
        a :Subscription ;
        :isActive true ;
        :hasMembership _Membership ;
        :hasClient _Client .

    () log:onNegativeSurface {
        _Login :subscription _Subscription .
        _Login :clientSubscription _Client .
        _Login a :ValidSubscription .
    } .  
} .
