@prefix : <http://www.example.org/rdf#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

# WHEN:
# (Login as <User>) &
# (<Session> a LoginSession) &&
# (<Session> user <User>) &&
# (<Session> status LoggedIn) 
# THEN:
#   ( Login user <User>) &&
#   ( Login isValue true)        
(_:Login _:Session _:User) log:onNegativeSurface {
    
    _:Login 
        a :Login ;
        :as _:User .

    _:Session a :LoginSession ;
        :user _:User ;
        :status :LoggedIn .

     () log:onNegativeSurface {
        _:Login :user _:User .
        _:Login :isValidLogin true .
    } .
} .

# WHEN:
# (<Login> a Login) &&
# (<Login> user <User>) &&
# (<Membership> a PMPMembership) &&
# (<Membership> isActive true) &&
# (<Membership> hasOrganization <Organization>) &&
# (<Membership> hasMember <User>) &&
# (<Organization> a Organization) &&
# (<Organization> isActive true) &&
# (<Organization> hasMember <User>)
# THEN:
#   (Login organization <Organization>) &&
#   (Login isValidMembership true)
(_:Login _:Membership _:Organization _:User) log:onNegativeSurface {
    _:Login 
        a :Login ;
        :user _:User .

    _:Membership 
        a :PMPMembership ;
        :isActive true ;
        :hasOrganization _:Organization ;
        :hasMember _:User .

    () log:onNegativeSurface {
        _:Login :membership _:Membership .
        _:Login :organization _:Organization .
        _:Login :isValidMembership true .
    } .
} .

# WHEN:
# (<Login> a Login) &&
# (<Login> user <User>) && 
# (<Organization> a Organization) &&
# (<Organization> isActive true) &&
# (<Organization> hasMember <User>)
# THEN:
#   (Login isValidOrganization true)
(_:Login _:Organization _:User) log:onNegativeSurface {
    _:Login 
        a :Login ;
        :user _:User .

    _:Organization 
        a :Organization ;
        :isActive true ;
        :hasMember _:User .

    () log:onNegativeSurface {
        _:Login :isValidOrganization true .
    }
} .

# WHEN:
# (<Login> a Login) &&
# (<Login> membership <Membership>) &&
# (<Subscription> a Subscription) &&
# (<Subscription> isActive true) &&
# (<Subscription> hasMembership <Membership>) &&
# (<Subscription> hasClient <Client>)
# THEN:
#   (Login clientSubcription <Client>) &&
#   (Login isValidSubscription true)
(_:Login _:Membership _:Client _:Subscription) log:onNegativeSurface {
    _:Login 
        a :Login ;
        :membership _:Membership .

    _:Subscription 
        a :Subscription ;
        :isActive true ;
        :hasMembership _:Membership ;
        :hasClient _:Client .

    () log:onNegativeSurface {
        _:Login :subscription _:Subscription .
        _:Login :clientSubcription _:Client .
        _:Login :isValidSubscription true .
    } .  
} .
