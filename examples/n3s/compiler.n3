@prefix : <https://github.com/eyereasoner/Notation3-By-Example/example/n3s#> .
@prefix q: <https://github.com/eyereasoner/Notation3-By-Example/example/n3q#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .

# Main rule which defined the :implies
(_A _C _X _Xp _Y _Yp _Ypbn _Ypvar _CNew) log:onNegativeSurface {
    _A :implies _C .

    # Translated qvars to blank nodes
    #  Xp will contain a unique list of blank nodes
    #  X will be the translated formula
    _A :qvar2bn (_Xp _X).
    _C :qvar2bn (_Yp _Y).

    # Bn blank nodes are rewritten blank nodes in the original formula
    # We scope these flagged blank nodes to create the consequent of a rule
    # E.g. when
    #      { _X a :Cat } :implies { _X a :Feline }
    # we need to construct something like
    #    (genid:t_0-bn) log:onNegativeSurface  {
    #          genid_t_0-bn a :Cat .
    #          ( genid:t_1-bn ) log:onNegativeSurface {
    #               genid:t_1-bn a :Feline .
    #           }
    #     } .
    # All var-skolems are removed from the consequent graffiti the
    # var-skolem references in the consequent should refer to the
    # var-skolem graffiti in the outermost negative surface.
    # E.g. when
    #     { q:X a :Cat } :implies { q:X a :Feline }
    # we need to construct something like
    #    (genid:t_0-var) log:onNegativeSurface  {
    #        genid:t_0-var a :Cat .
    #        () log:onNegativeSurface {
    #            genid:t_0-var a :Feline .
    #        } .
    #    } .
    ( _Yp :isSkolemBlank true ) :filter _Ypbn .

    # Ypp is the scoping part of blank nodes
    ( _X
      { _Ypbn log:onNegativeSurface _Y }
    ) graph:union _CNew .

    () log:onNegativeSurface {
        _Xp log:onNegativeSurface _CNew .
        _Yp log:onQuerySurface _Y .
    } .
} .

##################################################################

# X :qvar2 (Y Z)
# qvars to blank node translation
#   X a formula with possible n3q 'variables' (q:)
#   Y a list of blank nodes
#   Z a formula only containing blank nodes
#
# E.g.
#    { q:X a q:Y } :qvar2 ( (genid:t0 genid:t1) { genid:t0 a genid:t1} ) .
(_X _Y _Z _T1 _T2 _L) log:onNegativeSurface {
    () log:onNegativeSurface <<_X :qvar2bn (_Y _Z)>> .
    _X graph:list _L .
    ( _X _L () () ) :_qvar2bn (_T1 _T2) .
    _T2 list:unique _Y .
    _Z graph:list _T1 .
} .

(_Formula _Acc1 _Acc2 ) log:onNegativeSurface {
    () log:onNegativeSurface <<(_Formula () _Acc1 _Acc2) :_qvar2bn (_Acc1 _Acc2)>> .
} .

(
    _Formula
    _L _X _Acc1 _Acc2
    _Acc1New _Acc2New _Acc2S _Acc2P
    _N _H _T
    _S _P _O
    _Sv _Pv _Ov
    _Scope
) log:onNegativeSurface {
    () log:onNegativeSurface <<(_Formula _L _Acc1 _Acc2) :_qvar2bn _X>> .
    _L log:rawType rdf:List .
    _L list:length _N .
    _N math:greaterThan 0 .

    _L list:firstRest (_H _T) .

    _H log:includes { _S _P _O } .

    (_Formula _S) :skolemize _Sv .
    (_Formula _P) :skolemize _Pv .
    (_Formula _O) :skolemize _Ov .

    # If the S changed into a skolem, add it to the list of blank nodes
    (
        { _S log:equalTo _Sv }
        { _Acc2 log:equalTo _Acc2S }
        { (_Acc2 (_Sv)) list:append _Acc2S }
    ) log:ifThenElseIn _Scope .

    # If the P changed into a skolem, add it to the list of blank nodes
    (
        { _P log:equalTo _Pv }
        { _Acc2S log:equalTo _Acc2P }
        { (_Acc2S (_Pv)) list:append _Acc2P }
    ) log:ifThenElseIn _Scope .

    # If the O changed into a skolem, add it to the list of blank nodes
    (
        { _O log:equalTo _Ov }
        { _Acc2P log:equalTo _Acc2New }
        { (_Acc2P (_Ov)) list:append _Acc2New }
    ) log:ifThenElseIn _Scope .

    ( _Acc1 ({ _Sv _Pv _Ov }) ) list:append _Acc1New .

    ( _Formula _T _Acc1New _Acc2New ) :_qvar2bn _X .
} .

##################################################################

# (Formula X) :skolemize Y
# Turn a qvar into a skolemized version
# Turn a blank node into a 'flagged' skolemized version
#    Formula - a context formula for which a variable needs to be skolemized
#    X - a qvar or blank node variable
#    Y - the skolemized version of the variable
(_Formula _Y _X _Xn _Xnp _Scope) log:onNegativeSurface {
    () log:onNegativeSurface <<(_Formula _X) :skolemize _Y>> .

    (
        # If we get a n3q variable, equivalent of a qvar (?x) in notation3....
        {
            _X log:namespace _Xn .
            _Xn log:equalTo "https://github.com/eyereasoner/Notation3-By-Example/example/n3q#" .
        }
        # ... then turn it into a skolem variable
        {
            _X :skolemVar _Y .
        }
        # ... otherwise
        {
            # If we got a blank node, write it into a bn skolem
            # to trigger generating a universal in :_qvar2bn
            (
                {
                    _X :isSkolem true .
                }
                {
                    # Rewrite the skolem to trigger creating a universal
                    # Add the context formula to trigger a new blank node
                    # for every new quoted graph..
                    (_Formula _X) :skolemBlank _Y .
                }
                {
                    _X log:equalTo _Y .
                }
            ) log:ifThenElseIn _Scope .
        }
    ) log:ifThenElseIn _Scope .
} .

##################################################################

# X :isSkolem true
# Holds when X is a skolem
#   X - a resource
#   Y - true when X a skolem, var skolem or bn skolem
# E.g.
#       genid:t_0 :isSkolem true
#       genid:t_1-var :isSkolem true
#       genid:t_1-dn :isSkolem true
(_X _Xn) log:onNegativeSurface {
    () log:onNegativeSurface <<_X :isSkolem true>> .
    _X log:namespace _Xn .
    _Xn string:contains ".well-known/genid/" .
} .

##################################################################

# X :skolemVar Y
# Turn X into a var skolem Y (qvar equivalent ?Y)
#   X a resource
#   Y a var skolem
# E.g.
#      q:X :skolemVar genid:t_0-var
(_X _Y _T1 _T2 _T3) log:onNegativeSurface {
    () log:onNegativeSurface <<_X :skolemVar _Y>> .
    _X log:skolem _T1 .
    _T1 log:uri _T2 .
    ( _T2 "-var" ) string:concatenation _T3 .
    _Y log:uri _T3 .
} .

##################################################################

# X :skolemBlank Y
# Turn X into a flagged bn skolem Y (blank node equivalent _Y)
#   X a resource
#   Y a bn skolem
# E.g.
#       _X :skolemBlank genid:t_1-bn
(_X _Y _T1 _T2 _T3) log:onNegativeSurface {
    () log:onNegativeSurface <<_X :skolemBlank _Y>> .
    _X log:skolem _T1 .
    _T1 log:uri _T2 .
    ( _T2 "-bn" ) string:concatenation _T3 .
    _Y log:uri _T3 .
} .

##################################################################

# X :isSkolemBlank Y
# Test if X is a bn skolem
#   X a variable
#   Y a boolean
# E.g.
#       genid:t_1-bn :isSkolemBlank true
#       genid:t_0-var :isSkolemBlank false
(_X _Y ) log:onNegativeSurface {
    () log:onNegativeSurface <<_X :isSkolemBlank _Y>> .
    (_X "-bn") :isSkolemOfType _Y .
} .

# X :isSkolemVar Y
# Test if X is a bn skolem
#   X a variable
#   Y a boolean
# E.g.
#       genid:t_1-bn :isSkolemBlank false
#       genid:t_0-var :isSkolemBlank true
(_X _T1 _Y _Scope) log:onNegativeSurface {
    () log:onNegativeSurface <<_X :isSkolemVar _Y>> .
    (_X "-var") :isSkolemOfType _Y .
} .

# Helper function for :isSkolemBlank :isSkolemVar
(_X _Type _T1 _Y _Scope) log:onNegativeSurface {
    () log:onNegativeSurface <<(_X _Type) :isSkolemOfType _Y>> .
    _X log:uri _T1 .
    (
        {
            _T1 string:contains ".well-known/genid/" .
            _T1 string:endsWith _Type .
        }
        {
            _Y log:equalTo true .
        }
        {
            _Y log:equalTo false .
        }
    ) log:ifThenElseIn _Scope .
} .

##################################################################

# ( X F FV) :filter Y
# Filter a list X with a built-in value into Y using
#     Xi element X : triple Xi F FV holds
# with
#     F  a built-in (or backward rule)
#     FV a
#
# E.g.
#       ( (1 2 4 8 16) math:greaterThan 4) :filter (8 16)
(_X _F _FV _Y) log:onNegativeSurface {
    () log:onNegativeSurface <<(_X _F _FV) :filter _Y>> .
    (_X _F _FV ()) :_filter _Y .
} .

(_F _FV _Acc) log:onNegativeSurface {
    () log:onNegativeSurface <<( () _F _FV _Acc ) :_filter _Acc>> .
} .

(_X _F _FV _Acc _Y _H _T _N _AccNew _Scope) log:onNegativeSurface {
    () log:onNegativeSurface <<( _X _F _FV _Acc ) :_filter _Y>> .

    _X log:rawType rdf:List .
    _X list:length _N .
    _N math:greaterThan 0 .

    _X list:firstRest (_H _T) .

    (
        { _H _F _FV }
        {
            ( _Acc (_H)) list:append _AccNew .
        }
        {
            _Acc log:equalTo _AccNew .
        }
    ) log:ifThenElseIn _Scope .

    ( _T _F _FV _AccNew ) :_filter _Y .
} .

##################################################################

# Debug
(_S _O) log:onQuerySurface {
    _S log:onNegativeSurfaceTest _O .
} .

(_S _O) log:onQuerySurface {
    _S log:onQuerySurfaceTest _O .
} .

##################################################################
