@prefix : <https://github.com/eyereasoner/Notation3-By-Example/example/n3s#> .
@prefix q: <https://github.com/eyereasoner/Notation3-By-Example/example/n3q#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .

# Main rule which defined the :implies
(_:A _:C _:X _:Xp _:Y _:Yp _:Ypbn _:Ypvar _:CNew) log:onNegativeSurface {
    _:A :implies _:C .
    
    # Translated qvars to blank nodes 
    #  Xp will contain a unique list of blank nodes
    #  X will be the translated formula
    _:A :qvar2bn (_:Xp _:X).
    _:C :qvar2bn (_:Yp _:Y).

    # Bn blank nodes are rewritten blank nodes in the original formula
    # We scope these flagged blank nodes to create the consequent of a rule
    # E.g. when
    #      { _:X a :Cat } :implies { _:X a :Feline }
    # we need to construct something like
    #    (genid:t_0-bn) log:onNegativeSurface  {
    #          genid_:t_0-bn a :Cat .
    #          ( genid:t_1-bn ) log:onNegativeSurface {
    #               genid:t_1-bn a :Feline .
    #           }
    #     } .
    # All var-skolems are removed from the consequent graffiti the
    # var-skolem references in the consequent should refer to the 
    # var-skolem graffiti in the outermost negative surface.
    # E.g. when
    #     { q:X a :Cat } :implies { q:X a :Feline } 
    # we need to construct something like
    #    (genid:t_0-var) log:onNegativeSurface  {
    #        genid:t_0-var a :Cat .
    #        () log:onNegativeSurface {
    #            genid:t_0-var a :Feline .
    #        } .
    #    } .
    ( _:Yp :isSkolemBlank true ) :filter _:Ypbn .

    # Ypp is the scoping part of blank nodes
    ( _:X
      { _:Ypbn log:onNegativeSurface _:Y }
    ) graph:union _:CNew .

    () log:onNegativeSurface {
        _:Xp log:onNegativeSurface _:CNew .
        _:Yp log:onQuerySurface _:Y .
    } .
} .

##################################################################

# X :qvar2 (Y Z)
# qvars to blank node translation
#   X a formula with possible n3q 'variables' (q:)
#   Y a list of blank nodes
#   Z a formula only containing blank nodes
#
# E.g.
#    { q:X a q:Y } :qvar2 ( (genid:t0 genid:t1) { genid:t0 a genid:t1} ) .
(_:X _:Y _:Z _:T1 _:T2 _:L) log:onNegativeSurface {
    () log:negativeTriple {
        _:X :qvar2bn (_:Y _:Z).
    } .
    _:X graph:list _:L .
    ( _:X _:L () () ) :_qvar2bn (_:T1 _:T2) .
    _:T2 list:unique _:Y .
    _:Z graph:list _:T1 .
} .

(_:Formula _:Acc1 _:Acc2 ) log:onNegativeSurface {
    () log:negativeTriple {
        (_:Formula () _:Acc1 _:Acc2) :_qvar2bn (_:Acc1 _:Acc2) .
    } .
} .

(
    _:Formula
    _:L _:X _:Acc1 _:Acc2 
    _:Acc1New _:Acc2New _:Acc2S _:Acc2P 
    _:N _:H _:T 
    _:S _:P _:O
    _:Sv _:Pv _:Ov
    _:Scope
) log:onNegativeSurface {
    () log:negativeTriple {
        (_:Formula _:L _:Acc1 _:Acc2) :_qvar2bn _:X .
    } .
    _:L log:rawType rdf:List .
    _:L list:length _:N .
    _:N math:greaterThan 0 .

    _:L list:firstRest (_:H _:T) .

    _:H log:includes { _:S _:P _:O } .

    (_:Formula _:S) :skolemize _:Sv .
    (_:Formula _:P) :skolemize _:Pv .
    (_:Formula _:O) :skolemize _:Ov .

    # If the S changed into a skolem, add it to the list of blank nodes
    (
        { _:S log:equalTo _:Sv }
        { _:Acc2 log:equalTo _:Acc2S }
        { (_:Acc2 (_:Sv)) list:append _:Acc2S }
    ) log:ifThenElseIn _:Scope .

    # If the P changed into a skolem, add it to the list of blank nodes
    (
        { _:P log:equalTo _:Pv }
        { _:Acc2S log:equalTo _:Acc2P }
        { (_:Acc2S (_:Pv)) list:append _:Acc2P }
    ) log:ifThenElseIn _:Scope .

    # If the O changed into a skolem, add it to the list of blank nodes
    (
        { _:O log:equalTo _:Ov }
        { _:Acc2P log:equalTo _:Acc2New }
        { (_:Acc2P (_:Ov)) list:append _:Acc2New }
    ) log:ifThenElseIn _:Scope .

    ( _:Acc1 ({ _:Sv _:Pv _:Ov }) ) list:append _:Acc1New .

    ( _:Formula _:T _:Acc1New _:Acc2New ) :_qvar2bn _:X .
} .

##################################################################

# (Formula X) :skolemize Y
# Turn a qvar into a skolemized version
# Turn a blank node into a 'flagged' skolemized version
#    Formula - a context formula for which a variable needs to be skolemized
#    X - a qvar or blank node variable
#    Y - the skolemized version of the variable
(_:Formula _:Y _:X _:Xn _:Xnp _:Scope) log:onNegativeSurface {
    () log:negativeTriple {
        (_:Formula _:X) :skolemize _:Y .
    } .

    ( 
        # If we get a n3q variable, equivalent of a qvar (?x) in notation3....
        {
            _:X log:namespace _:Xn .
            _:Xn log:equalTo "https://github.com/eyereasoner/Notation3-By-Example/example/n3q#" .
        }
        # ... then turn it into a skolem variable
        {
            _:X :skolemVar _:Y .
        }
        # ... otherwise
        {
            # If we got a blank node, write it into a bn skolem
            # to trigger generating a universal in :_qvar2bn
            (
                {
                    _:X :isSkolem true .
                }
                {
                    # Rewrite the skolem to trigger creating a universal
                    # Add the context formula to trigger a new blank node
                    # for every new quoted graph..
                    (_:Formula _:X) :skolemBlank _:Y .
                }
                {
                    _:X log:equalTo _:Y .
                }
            ) log:ifThenElseIn _:Scope .
        }
    ) log:ifThenElseIn _:Scope .
} .

##################################################################

# X :isSkolem true
# Holds when X is a skolem
#   X - a resource
#   Y - true when X a skolem, var skolem or bn skolem
# E.g.
#       genid:t_0 :isSkolem true
#       genid:t_1-var :isSkolem true
#       genid:t_1-dn :isSkolem true
(_:X _:Xn) log:onNegativeSurface {
    () log:negativeTriple {
        _:X :isSkolem true .
    } .
    _:X log:namespace _:Xn .
    _:Xn string:contains ".well-known/genid/" .
} .

##################################################################

# X :skolemVar Y 
# Turn X into a var skolem Y (qvar equivalent ?Y)
#   X a resource
#   Y a var skolem
# E.g. 
#      q:X :skolemVar genid:t_0-var
(_:X _:Y _:T1 _:T2 _:T3) log:onNegativeSurface {
    () log:negativeTriple {
        _:X :skolemVar _:Y .
    } .
    _:X log:skolem _:T1 .
    _:T1 log:uri _:T2 .
    ( _:T2 "-var" ) string:concatenation _:T3 .
    _:Y log:uri _:T3 .
} .

##################################################################

# X :skolemBlank Y 
# Turn X into a flagged bn skolem Y (blank node equivalent _:Y)
#   X a resource
#   Y a bn skolem
# E.g.
#       _:X :skolemBlank genid:t_1-bn
(_:X _:Y _:T1 _:T2 _:T3) log:onNegativeSurface {
    () log:negativeTriple {
        _:X :skolemBlank _:Y .
    } .
    _:X log:skolem _:T1 .
    _:T1 log:uri _:T2 .
    ( _:T2 "-bn" ) string:concatenation _:T3 .
    _:Y log:uri _:T3 .
} .

##################################################################

# X :isSkolemBlank Y
# Test if X is a bn skolem
#   X a variable
#   Y a boolean
# E.g.
#       genid:t_1-bn :isSkolemBlank true
#       genid:t_0-var :isSkolemBlank false
(_:X _:Y ) log:onNegativeSurface {
    () log:negativeTriple {
        _:X :isSkolemBlank _:Y .
    } .
    (_:X "-bn") :isSkolemOfType _:Y .
} .

# X :isSkolemVar Y
# Test if X is a bn skolem
#   X a variable
#   Y a boolean
# E.g.
#       genid:t_1-bn :isSkolemBlank false
#       genid:t_0-var :isSkolemBlank true
(_:X _:T1 _:Y _:Scope) log:onNegativeSurface {
    () log:negativeTriple {
        _:X :isSkolemVar _:Y .
    } .
    (_:X "-var") :isSkolemOfType _:Y .
} .

# Helper function for :isSkolemBlank :isSkolemVar
(_:X _:Type _:T1 _:Y _:Scope) log:onNegativeSurface {
    () log:negativeTriple {
        (_:X _:Type) :isSkolemOfType _:Y .
    } .
    _:X log:uri _:T1 .
    (
        {
            _:T1 string:contains ".well-known/genid/" .
            _:T1 string:endsWith _:Type .
        }
        {
            _:Y log:equalTo true .
        }
        {
            _:Y log:equalTo false .
        }
    ) log:ifThenElseIn _:Scope .
} .

##################################################################

# ( X F FV) :filter Y
# Filter a list X with a built-in value into Y using 
#     Xi element X : triple Xi F FV holds
# with
#     F  a built-in (or backward rule)
#     FV a 
#
# E.g.
#       ( (1 2 4 8 16) math:greaterThan 4) :filter (8 16)
(_:X _:F _:FV _:Y) log:onNegativeSurface {
    () log:negativeTriple {
        (_:X _:F _:FV) :filter _:Y .
    } .
    (_:X _:F _:FV ()) :_filter _:Y .
} .

(_:F _:FV _:Acc) log:onNegativeSurface {
    () log:negativeTriple {
        ( () _:F _:FV _:Acc ) :_filter _:Acc .
    } .
} .

(_:X _:F _:FV _:Acc _:Y _:H _:T _:N _:AccNew _:Scope) log:onNegativeSurface {
    () log:negativeTriple {
        ( _:X _:F _:FV _:Acc ) :_filter _:Y .
    } .

    _:X log:rawType rdf:List .
    _:X list:length _:N .
    _:N math:greaterThan 0 .

    _:X list:firstRest (_:H _:T) .

    (
        { _:H _:F _:FV }
        {
            ( _:Acc (_:H)) list:append _:AccNew .
        }
        {
            _:Acc log:equalTo _:AccNew .
        }
    ) log:ifThenElseIn _:Scope .

    ( _:T _:F _:FV _:AccNew ) :_filter _:Y .
} .

##################################################################

# Debug
(_:S _:O) log:onQuerySurface {
    _:S log:onNegativeSurfaceTest _:O .
} .

(_:S _:O) log:onQuerySurface {
    _:S log:onQuerySurfaceTest _:O .
} .

##################################################################
